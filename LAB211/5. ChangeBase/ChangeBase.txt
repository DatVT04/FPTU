public class BaseNumber {

    private Base base;
    private String number;

    public BaseNumber() {
    }

    public Base getBase() {
        return base;
    }

    public void setBase(Base base) {
        this.base = base;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public BaseNumber(Base base, String number) throws Exception {
        if (isValidNumber(base, number)) {
            this.base = base;
            this.number = number;
        } else {
            throw new Exception("Invalid number of base");
        }
    }

    private boolean isValidNumber(Base base, String number) {
        switch (base) {
            case BIN:
                return number.matches("[01]+");
            case DEC:
                return number.matches("[0-9]+");
            case HEX:
                return number.matches("[0-9A-F]+");
            default:
                throw new AssertionError();
        }
    }

    //Base
    public enum Base {
        DEC(10), HEX(16), BIN(2);
        private int base;

        private Base(int base) {
            this.base = base;
        }

        public static Base getBase(int type) {
            switch (type) {
                case 10:
                    return DEC;
                case 16:
                    return HEX;
                case 2:
                    return BIN;
                default:
                    throw new AssertionError();
            }
        }

        public int value() {
            return base;
        }
    }

    //BaseInputer
    public BaseNumber input() throws Exception {
        int choice = Validator.getInt("Enter 1 for binary,2 for decimal,3 for hexadecimal: ",
                "Just 1-> 3", "Invalid!", 1, 3);
        switch (choice) {
            case 1:
                base = Base.BIN;
                number = Validator.getString("Enter a number: ", "Not a valid number", "[01]+");
                break;
            case 2:
                base = Base.DEC;
                number = Validator.getString("Enter a number: ", "Not a valid number", "[0-9]+");
                break;
            case 3:
                base = Base.HEX;
                number = Validator.getString("Enter a number: ", "Not a valid number", "[0-9A-F]+");
                break;
        }
        return new BaseNumber(base, number);
    }

    //BaseNumber
    private BaseNumber convertToDec() throws Exception {
        BigInteger decNum = BigInteger.ZERO;
        BigInteger base = BigInteger.valueOf(this.base.value());
        BigInteger power = BigInteger.ONE; //Bien tich luy bat dau tu base ^ 0
        for (int i = number.length() - 1; i >= 0; i--) {
            char digit = number.charAt(i);
            BigInteger digitValue = BigInteger.valueOf(Character.getNumericValue(digit));
            decNum = decNum.add(digitValue.multiply(power));
            power = power.multiply(base);
        }
        return new BaseNumber(Base.DEC, decNum.toString());
    }

    private BaseNumber convertDecToOut(Base outBase) throws Exception {
        BigInteger decNum = new BigInteger(convertToDec().number);
        StringBuilder reverseResult = new StringBuilder();
        while (decNum.compareTo(BigInteger.ZERO) != 0) {
            int remainNum = decNum.mod(BigInteger.valueOf(outBase.value())).intValue();
            decNum = decNum.divide(BigInteger.valueOf(outBase.value()));
            switch (remainNum) {
                case 10:
                    reverseResult.insert(0, "A");
                    break;
                case 11:
                    reverseResult.insert(0, "B");
                    break;
                case 12:
                    reverseResult.insert(0, "C");
                    break;
                case 13:
                    reverseResult.insert(0, "D");
                    break;
                case 14:
                    reverseResult.insert(0, "E");
                    break;
                case 15:
                    reverseResult.insert(0, "F");
                    break;
                default:
                    reverseResult.insert(0, remainNum);
            }
        }
        if (reverseResult.toString().trim().isEmpty()) {
            reverseResult.insert(0, "0");
        }
        BaseNumber result = new BaseNumber(outBase, reverseResult.toString());
        return result;
    }

    public BaseNumber getOutputByBase(Base outBase) throws Exception {
        return new BaseNumber(outBase, convertDecToOut(outBase).number);
    }
}

public class Validator {
    private static final Scanner SCANNER = new Scanner(System.in);
//    private Validator(){
//        
//    }
    public static int getInt(String messageInfo,String messsageErrorOutOfRange,
            String messageErrorNumber,int min,int max){
        do {            
            try {
                System.out.print(messageInfo);
                int number = Integer.parseInt(SCANNER.nextLine());
                if(number>=min&&number<=max){
                    return number;
                }else{
                    System.out.println(messsageErrorOutOfRange);
                }
            } catch (NumberFormatException e) {
                System.out.println(messageErrorNumber);
            }
        } while (true);
    }
    
    
    public static String getString(String messageInfo, String messageError, final String REGEX){
        do {            
            System.out.print(messageInfo);
            String str = SCANNER.nextLine();
            if(str.matches(REGEX)){
                return str;
            }
            System.out.println(messageError);
        } while (true);
    }
}


public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        BaseNumber number = null;
        
        BaseNumber inputer = new BaseNumber();
        try {
            number = inputer.input();
            int choice = Validator.getInt("Enter 1 for binary,2 for decimal,3 for hexadecimal: ",
                    "Just 1-> 3", "Invalid!", 1, 3);
            BaseNumber result = null;
            switch (choice) {
                case 1:
                    result = number.getOutputByBase(Base.BIN);
                    break;
                case 2:
                    result = number.getOutputByBase(Base.DEC);
                    break;
                case 3:
                    result = number.getOutputByBase(Base.HEX);
                    break;
            }
            System.out.println("Number after convert: " + result.getNumber());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}